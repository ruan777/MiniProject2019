#include <idc.idc>
static main(){
    auto Funcs = GetAllFunc(); //return a array contain all func's addr
    auto pqueue_find = GetFuncAddr(Funcs,"_pqueue_find");
    auto pqueue_insert = GetFuncAddr(Funcs,"_pqueue_insert");
    
    auto id_pqueue_find = Get_xrefs(pqueue_find,"xrefs_of_pqueue_find");
    auto id_pqueue_insert = Get_xrefs(pqueue_insert,"xrefs_of_pqueue_insert");
    
    auto dtls1_reassemble_fragment = Search_reassmbleFrag(id_pqueue_find,id_pqueue_insert);
    auto dtls1_process_out_of_seq_message = Search_processMsg(id_pqueue_find,id_pqueue_insert);
    
    Message("pqueue_find : 0x%X\n",pqueue_find);
    Message("pqueue_insert : 0x%X\n",pqueue_insert);
    Message("dtls1_reassemble_fragment : 0x%X\n",dtls1_reassemble_fragment);
    Message("dtls1_process_out_of_seq_message : 0x%X\n",dtls1_process_out_of_seq_message);
    
    //Show(id_pqueue_find);
    //Show(id_pqueue_insert);
    
    Message("test\n");
}
//find all xrefs of func
static Get_xrefs(func_addr,array_name){
    auto id = get_array_id(array_name);
    if(id != -1)
        delete_array(id);
    id = create_array(array_name);
      
    auto addr = RfirstB(func_addr);
    auto idx = 0;
    auto func_start = 0;
    while(addr != BADADDR){
        func_start = GetFunctionAttr(addr,FUNCATTR_START);
        SetArrayLong(id,idx,func_start);
        addr = RnextB(func_addr,addr);
        idx = idx + 1;
    }
    return id;
}

static GetFuncAddr(id,func_name){
    auto addr = LocByName(func_name);
    if(addr != BADADDR)
        return addr;
    auto idx = 0;
    for( idx = get_first_index(AR_LONG,id);idx != -1;idx= get_next_index(AR_LONG,id,idx)){
        addr = get_array_element(AR_LONG,id,idx);
        if(Name(addr) == func_name)
            return addr;
    }
    return -1;
}

static GetAllFunc(void){
    auto id = get_array_id("Funcs");
    if(id != -1)
        delete_array(id);
    id = create_array("Funcs");
    if(id == -1){
        Warning("Can't create array!");
        return -1;
    }
    
    auto idx = 0;
    auto ea;
    for(ea = get_next_func(0); ea != BADADDR; ea = get_next_func(ea)){
        set_array_long(id,idx,ea);
        idx = idx + 1;
    }
    return id;
}

static Show(id){
    auto idx = 0;
    for( idx = get_first_index(AR_LONG,id);idx != -1;idx= get_next_index(AR_LONG,id,idx)){
        Message("idx%d : 0x%X\n",idx,get_array_element(AR_LONG,id,idx));
    }
}

static Search_reassmbleFrag(id1,id2){
    auto idx1 = 0;
    auto idx2 = 0;
    auto v1 = 0;
    for( idx1 = GetFirstIndex(AR_LONG,id1); idx1 != -1; idx1 = GetNextIndex(AR_LONG,id1,idx1)){
        
        v1 = GetArrayElement(AR_LONG,id1,idx1);
        
        for( idx2 = GetFirstIndex(AR_LONG,id2); idx2 != -1; idx2 = GetNextIndex(AR_LONG,id2,idx2)){
            if(v1 == GetArrayElement(AR_LONG,id2,idx2)) //found!
                return v1;
        }
    }
    return -1;//not found
}

static Search_processMsg(id1,id2){
    auto reassmble_fragment_addr = Search_reassmbleFrag(id1,id2);
    auto idx1 = 0;
    auto idx2 = 0;
    auto v1 = 0;
    for( idx1 = GetFirstIndex(AR_LONG,id1); idx1 != -1; idx1 = GetNextIndex(AR_LONG,id1,idx1)){
        
        v1 = GetArrayElement(AR_LONG,id1,idx1);
        
        for( idx2 = GetFirstIndex(AR_LONG,id2); idx2 != -1; idx2 = GetNextIndex(AR_LONG,id2,idx2)){
            if(v1 == GetArrayElement(AR_LONG,id2,idx2) && v1 != reassmble_fragment_addr) //found!
                return v1;
        }
    }
    return -1;//not found
}
