from idaapi import *

def Get_addr_by_name(func_list,func_name):
    for i in func_list:
        if i[1] == func_name:
            return i[0]
    return -1

#return a list of function's xrefs			
def Get_xrefs(func_addr):
    t = []
    res = []
    for xrefs in XrefsTo(func_addr):
        t.append(xrefs.frm)
    #get function start addr
    for i in t:
        if type(get_func(i)) != type(None):
            res.append(get_func(i).startEA)
    return res

def Get_drefs(str_addr):
    t = []
    res = []
    for drefs in DataRefsTo(str_addr):
        t.append(drefs)
    #get function start addr
    for i in t:
        if type(get_func(i)) != type(None):
            res.append(get_func(i).startEA)
    return res

def Search_equal_element(list1,list2):   	
    for addr in list1:
        if addr in list2: #found
            return addr
    #not found
    return -1

def Search_processMsg(list1,list2):
    reassmble_frag = Search_equal_element(list1,list2)
    for i in list1:
        if i in list2 and i != reassmble_frag:
            return i
    return -1

def Locate_pqueue_insert(func_list):
    HEX_SSL_PQUEUE_C = ''.join([hex(ord(x))[2:]+' ' for x in "ssl/pqueue.c"])
    str_addr = find_binary(0,0xcafeba,HEX_SSL_PQUEUE_C,16,SEARCH_DOWN )
    dref_str = Get_drefs(str_addr)
    crypto_zalloc = Get_addr_by_name(func_list,"_CRYPTO_zalloc")
    xref_crypto_zalloc = Get_xrefs(crypto_zalloc)
    pqueue_new = Search_equal_element(dref_str,xref_crypto_zalloc)
    
    
    t = get_next_func(pqueue_new) #pqueue_free,but we don't need it
    pqueue_insert = get_next_func(t);#get it :)
    
    return pqueue_insert;

def main():
    
    pqueue_find = Get_addr_by_name(funcs,".pqueue_find")
    pqueue_insert = Get_addr_by_name(funcs,".pqueue_insert")    
    
    if pqueue_insert == -1 or pqueue_find == -1:
        pqueue_insert = Locate_pqueue_insert(funcs)
        t = get_next_func(pqueue_insert)    #pqueue_peek
        t = get_next_func(t)       #pqueue_pop
        pqueue_find = get_next_func(t)  #pqueue_find :)
    
    lpqueue_find = Get_xrefs(pqueue_find)
    lpqueue_insert = Get_xrefs(pqueue_insert)
    
    
    dtls1_reassemble_fragment = Search_equal_element(lpqueue_find,lpqueue_insert);
    dtls1_process_out_of_seq_message = Search_processMsg(lpqueue_find,lpqueue_insert);
    
    # search string "item != NULL" or "Assertion failed: item != NULL"(openssl_1.1.x)   
    str_itemnull = find_binary(0,0xcafeba,HEX_ITEMNULL,16,SEARCH_DOWN )
    str_assertfail = find_binary(0,0xcafeba,HEX_ASSERT_FAIL,16,SEARCH_DOWN )

    dref_itemnull = Get_drefs(str_itemnull)
    dref_assertfail = Get_drefs(str_assertfail)
    
    # if string "item != NULL" or "Assertion failed: item != NULL" refed by
    # function dtls1_reassemble_fragment and dtls1_process_out_of_seq_message
    if len(dref_assertfail) != 0 or len(dref_itemnull) != 0:
        if (dtls1_reassemble_fragment in dref_assertfail and dtls1_process_out_of_seq_message in dref_assertfail) \
            or (dtls1_reassemble_fragment in dref_itemnull and dtls1_process_out_of_seq_message in dref_itemnull):
            Warning("CVE-2014-3507 fixed! :)")
        else:
            Warning("CVE-2014-3507 not fixed! :(")
    else:
        Warning("CVE-2014-3507 not fixed! :(")
           
if __name__ == "__main__":
    funcs = [x for x in Names()]  # func_list[(ea1,name1),(ea2,name2)....]
    HEX_ITEMNULL = "69 74 65 6D 20 21 3D 20 4E 55 4C 4C 00"
    HEX_ASSERT_FAIL = "41 73 73 65 72 74 69 6F 6E 20 66 61 69 6C 65 64 3A 20 69 74 65 6D 20 21 3D 20 4E 55 4C 4C 00"
    
    main() 
